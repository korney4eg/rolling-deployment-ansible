# vim:ft=ansible:
---
- name: Provision ec2 instances based on the environment
  hosts: localhost
  connection: local
  gather_facts: False
  vars:
    region: eu-west-1

  tasks:

    - name: Get vpc facts
      ec2_vpc_net_facts:
        region: "{{ region }}"
        filters:
          "tag:Environment": MyTest
      register: found_vpc

    - set_fact:
        vpc: "{{ found_vpc.vpcs.0 }}"

    - name: Get old instances
      ec2_remote_facts:
        filters:
          vpc_id: "{{ vpc.id }}"
          instance-state-name: running
          #"tag:Name": MyTestApp
        region: "{{ region }}"
      register: ec2_instances

    - name: Terminate instances that were previously launched
      ec2:
        state: 'absent'
        instance_ids: '{{ item.id }}'
        region: "{{ region }}"
      loop: "{{ec2_instances.instances}}"

    - name: Remove ELB
      ec2_elb_lb:
        name: "app-rolling-lb"
        state: absent
        region: "{{ region }}"
        wait: true


    - name: Remove RDS
      rds:
        instance_name: 'database'
        command: delete
        region: "{{ region }}"

    - name: Remove RDS subnet group
      rds_subnet_group:
        state: absent
        name: norwegian-blue
        region: "{{ region }}"

    - name: search for security groups
      ec2_group_facts:
        filters:
          #"tag:Environment": MyTest
          vpc-id: "{{ vpc.id }}"
        region: "{{ region }}"
      register: db_group

    - debug:
        msg: "{{ db_group }}"

    - name: Delete security groups
      ec2_group:
        group_id: "{{ item.group_id }}"
        region: "{{ region }}"
        state: absent
      when: item.group_name != 'default'
      loop: "{{ db_group.security_groups }}"

    - name: Get rout table facts
      ec2_vpc_route_table_facts:
        filters:
          vpc_id: "{{ vpc.id }}"
          "tag:Environment": MyTest
        region: "{{region}}"
      register: route_table

    - name: Remove route table
      ec2_vpc_route_table:
        vpc_id: "{{ vpc.id }}"
        region: "{{region}}"
        route_table_id: "{{ item.id }}"
        lookup: id
        state: absent
      loop: "{{ route_table.route_tables }}"

    - name: get facts about IGW
      ec2_vpc_igw_facts:
        filters:
          #vpc_id: "{{ vpc.id }}"
          "tag:Environment": MyTest
        region: "{{region}}"
      register: igw_facts

    - name: Remove IGW
      ec2_vpc_igw:
        vpc_id: "{{ vpc.id }}"
        region: "{{region}}"
        state: "absent"

    - name: Get all subnets
      ec2_vpc_subnet_facts:
        filters:
          vpc-id: "{{ vpc.id }}"
          #"tag:Environment": MyTest
        region: "{{region}}"
      register: subnet_facts

    - name: Remove subnets
      ec2_vpc_subnet:
        state: absent
        cidr: "{{ item.cidr_block }}"
        vpc_id: "{{ vpc.id }}"
        region: "{{region}}"
      loop: "{{ subnet_facts.subnets }}"

    - name: Remove keypair
      ec2_key:
        name: provisioner
        region: "{{ region }}"
        state: absent

    - name: remove VPC
      ec2_vpc_net:
        name: "my-vpc"
        cidr_block: 10.10.0.0/24
        region: "{{region}}"
        state: absent

  

