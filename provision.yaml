---
- name: Provision ec2 instances based on the environment
  hosts: localhost
  connection: local
  gather_facts: False
  vars:
    region: eu-west-1
    version: 2.21
    instance_num: 2

  tasks:
    - name: create VPC
      ec2_vpc_net:
        name: "my-vpc"
        cidr_block: 10.10.0.0/24
        region: "{{region}}"
        state: present
        tags:
          Environment: MyTest
      register: vpc

  
    - name: Create app subnet
      ec2_vpc_subnet:
        state: present
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{region}}"
        cidr: "10.10.0.0/26"
        map_public: yes
        tags:
          Environment: MyTest
      register: app_subnet

    - name: create IGW
      ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{region}}"
        state: "present"
        tags:
          Environment: MyTest
      register: igw
  
    - name: Set up public subnet route table
      ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{region}}"
        tags:
          Name: Public
          Environment: MyTest
        subnets:
          - "{{ app_subnet.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"
      register: public_route_table

    - name: Create Security Group for ELB
      ec2_group:
        name: elb_sg
        description: Security Group for ELB
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        rules:
          - proto: tcp
            ports:
            - 80
            cidr_ip: 0.0.0.0/0
        tags:
          Environment: MyTest
      register: elb_sg

    - name: Create Security Group for App server
      ec2_group:
        name: appserverLB
        description: Application Server
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        rules:
          - proto: tcp
            ports:
              - 8081
            group_id: "{{ elb_sg.group_id }}"
          - proto: tcp
            ports:
            - 22
            cidr_ip: 0.0.0.0/0
        tags:
          Environment: MyTest
      register: app_sg

    - name: create a new ec2 key pair
      ec2_key:
        name: provisioner
        region: "{{ region }}"
        key_material: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
      register: keypair

    - name: Creating database coniguration template
      template:
        src: ./setup.sh.j2
        dest: ./setup.sh

    - name: Get new instances
      ec2_remote_facts:
        filters:
          vpc_id: "{{ vpc.vpc.id }}"
          instance-state-name: running
          "tag:Name": MyTestApp
          "tag:Environment": MyTest
          "tag:Version": "{{ version }}"
        region: "{{ region }}"
      register: new_instances

    - name: set new instances ids if not found previously created
      set_fact:
        new_instances: []
      when: new_instances.instances is not defined

    - name: set new instances ids if found previously created
      set_fact:
        new_instances: "{{ new_instances.instances|map(attribute='id')|list }}"
      when: new_instances.instances is defined

    - name: Get old instances
      ec2_remote_facts:
        filters:
          vpc_id: "{{ vpc.vpc.id }}"
          instance-state-name: running
          "tag:Name": MyTestApp
          "tag:Environment": MyTest
        region: "{{ region }}"
      register: old_instances

    - name: set old instances ids if not found previously created
      set_fact:
        old_instances: []
      when: old_instances.instances is not defined

    - name: set old instances ids if found previously created
      set_fact:
        old_instances: "{{ old_instances.instances|map(attribute='id')|list }}"
      when: old_instances.instances is defined

    - name: Remove new instances from old ones
      set_fact:
        old_instances: "{{old_instances|difference(new_instances)}}"
        old_instances_num: "{{old_instances|difference(new_instances)|length}}"

    - debug:
        msg: "Old instances:{{ old_instances }}"

    - debug:
        msg: "New instances:{{ new_instances }}"

    - include: add_remove.yaml
      with_sequence: start=1 end={{ instance_num }}
      loop_control:
        loop_var: instance_counter

    - name: Terminate all rest instances
      ec2:
        state: 'absent'
        instance_ids: '{{ item }}'
        region: "{{ region }}"
        group_id: "{{ app_sg.group_id }}"
        vpc_subnet_id: "{{ app_subnet.subnet.id }}"
      with_items: "{{ old_instances}}"
